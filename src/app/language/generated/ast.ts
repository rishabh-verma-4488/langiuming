/******************************************************************************
 * This file was generated by langium-cli 3.5.2.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import * as langium from 'langium';

export const SpecterTerminals = {
    NUMBER: /-?\d+(\.\d+)?/,
    STRING: /"[^"]*"/,
    ID: /[a-zA-Z_$][a-zA-Z0-9_$]*/,
    WS: /[\s\n\r]+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type SpecterTerminalNames = keyof typeof SpecterTerminals;

export type SpecterKeywordNames =
    | "("
    | ")"
    | ","
    | "AND"
    | "OR"
    | "["
    | "]"
    | "false"
    | "true";

export type SpecterTokenNames = SpecterTerminalNames | SpecterKeywordNames;

export type Expression = LogicalExpression;

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export type Literal = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;

export const Literal = 'Literal';

export function isLiteral(item: unknown): item is Literal {
    return reflection.isInstance(item, Literal);
}

export type PrimaryExpression = FunctionCall | Literal | ParenthesizedExpression;

export const PrimaryExpression = 'PrimaryExpression';

export function isPrimaryExpression(item: unknown): item is PrimaryExpression {
    return reflection.isInstance(item, PrimaryExpression);
}

export interface ArrayLiteral extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'ArrayLiteral';
    values: Array<Expression>;
}

export const ArrayLiteral = 'ArrayLiteral';

export function isArrayLiteral(item: unknown): item is ArrayLiteral {
    return reflection.isInstance(item, ArrayLiteral);
}

export interface BooleanLiteral extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'BooleanLiteral';
    value: 'false' | 'true';
}

export const BooleanLiteral = 'BooleanLiteral';

export function isBooleanLiteral(item: unknown): item is BooleanLiteral {
    return reflection.isInstance(item, BooleanLiteral);
}

export interface FunctionArguments extends langium.AstNode {
    readonly $container: FunctionCall;
    readonly $type: 'FunctionArguments';
    values: Array<Expression>;
}

export const FunctionArguments = 'FunctionArguments';

export function isFunctionArguments(item: unknown): item is FunctionArguments {
    return reflection.isInstance(item, FunctionArguments);
}

export interface FunctionCall extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'FunctionCall';
    arguments?: FunctionArguments;
    name: string;
}

export const FunctionCall = 'FunctionCall';

export function isFunctionCall(item: unknown): item is FunctionCall {
    return reflection.isInstance(item, FunctionCall);
}

export interface LogicalExpression extends langium.AstNode {
    readonly $container: ArrayLiteral | FunctionArguments | Model | ParenthesizedExpression;
    readonly $type: 'ArrayLiteral' | 'BooleanLiteral' | 'FunctionCall' | 'Literal' | 'LogicalExpression' | 'NumberLiteral' | 'ParenthesizedExpression' | 'PrimaryExpression' | 'StringLiteral';
    left: PrimaryExpression;
    operator: 'AND' | 'OR';
    right: PrimaryExpression;
}

export const LogicalExpression = 'LogicalExpression';

export function isLogicalExpression(item: unknown): item is LogicalExpression {
    return reflection.isInstance(item, LogicalExpression);
}

export interface Model extends langium.AstNode {
    readonly $type: 'Model';
    expressions: Array<Expression>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface NumberLiteral extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'NumberLiteral';
    value: number;
}

export const NumberLiteral = 'NumberLiteral';

export function isNumberLiteral(item: unknown): item is NumberLiteral {
    return reflection.isInstance(item, NumberLiteral);
}

export interface ParenthesizedExpression extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'ParenthesizedExpression';
    expression: Expression;
}

export const ParenthesizedExpression = 'ParenthesizedExpression';

export function isParenthesizedExpression(item: unknown): item is ParenthesizedExpression {
    return reflection.isInstance(item, ParenthesizedExpression);
}

export interface StringLiteral extends langium.AstNode {
    readonly $container: LogicalExpression;
    readonly $type: 'StringLiteral';
    value: string;
}

export const StringLiteral = 'StringLiteral';

export function isStringLiteral(item: unknown): item is StringLiteral {
    return reflection.isInstance(item, StringLiteral);
}

export type SpecterAstType = {
    ArrayLiteral: ArrayLiteral
    BooleanLiteral: BooleanLiteral
    Expression: Expression
    FunctionArguments: FunctionArguments
    FunctionCall: FunctionCall
    Literal: Literal
    LogicalExpression: LogicalExpression
    Model: Model
    NumberLiteral: NumberLiteral
    ParenthesizedExpression: ParenthesizedExpression
    PrimaryExpression: PrimaryExpression
    StringLiteral: StringLiteral
}

export class SpecterAstReflection extends langium.AbstractAstReflection {

    getAllTypes(): string[] {
        return [ArrayLiteral, BooleanLiteral, Expression, FunctionArguments, FunctionCall, Literal, LogicalExpression, Model, NumberLiteral, ParenthesizedExpression, PrimaryExpression, StringLiteral];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ArrayLiteral:
            case BooleanLiteral:
            case NumberLiteral:
            case StringLiteral: {
                return this.isSubtype(Literal, supertype);
            }
            case FunctionCall:
            case Literal:
            case ParenthesizedExpression: {
                return this.isSubtype(PrimaryExpression, supertype);
            }
            case LogicalExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case PrimaryExpression: {
                return this.isSubtype(LogicalExpression, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: langium.ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): langium.TypeMetaData {
        switch (type) {
            case ArrayLiteral: {
                return {
                    name: ArrayLiteral,
                    properties: [
                        { name: 'values', defaultValue: [] }
                    ]
                };
            }
            case BooleanLiteral: {
                return {
                    name: BooleanLiteral,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case FunctionArguments: {
                return {
                    name: FunctionArguments,
                    properties: [
                        { name: 'values', defaultValue: [] }
                    ]
                };
            }
            case FunctionCall: {
                return {
                    name: FunctionCall,
                    properties: [
                        { name: 'arguments' },
                        { name: 'name' }
                    ]
                };
            }
            case LogicalExpression: {
                return {
                    name: LogicalExpression,
                    properties: [
                        { name: 'left' },
                        { name: 'operator' },
                        { name: 'right' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'expressions', defaultValue: [] }
                    ]
                };
            }
            case NumberLiteral: {
                return {
                    name: NumberLiteral,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case ParenthesizedExpression: {
                return {
                    name: ParenthesizedExpression,
                    properties: [
                        { name: 'expression' }
                    ]
                };
            }
            case StringLiteral: {
                return {
                    name: StringLiteral,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new SpecterAstReflection();
